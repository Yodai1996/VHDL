Library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;
entity TopCollatz is
end TopCollatz;
architecture SIM of TopCollatz is
signal clk :std_logic :='0';
signal reset :std_logic :='0';
signal go :std_logic :='0';
signal D :std_logic_vector(9 downto 0) :="0000000001";
signal monM  :std_logic_vector(17 downto 0) :=(others=>'0');  
signal height  :std_logic_vector(17 downto 0) :=(others=>'0');  
signal count  :std_logic_vector(7 downto 0) :=(others=>'0');  
signal monC  :std_logic_vector(1 downto 0) :=(others=>'0');  
signal Done  :std_logic :='0';
  
component Collatz
port(
  clk :in std_logic :='0';
  reset :in std_logic :='0';
  go :in std_logic :='0';
  D :in std_logic_vector(9 downto 0) :=(others=>'0');
  Dout :out std_logic_vector(9 downto 0) :=(others=>'0');
  monM  :out  std_logic_vector(17 downto 0) :=(others=>'0');  
  height  :out  std_logic_vector(17 downto 0) :=(others=>'0');  
  count  :out  std_logic_vector(7 downto 0) :=(others=>'0');  
  monC  :out  std_logic_vector(1 downto 0) :=(others=>'0');  
  Done  :out  std_logic :='0'   
);
end component;
begin
u:Collatz port map(
  clk=>clk, reset=>reset, go=>go, D=>D, monM=>monM, Dout=>Dout,
  height=>height, count=>count, monC=>monC, Done=>Done );
  
process begin
clk<='1';
wait for 10 ns;
clk<='0';
wait for 10 ns;
end process;

process begin
if D<"1111111111" then
  wait for 5 ns;
  reset<='1';
  D<="1010111111";
  wait for 40 ns;
  reset<='0';
  go<='1';
  wait for 40 ns;
  go<='0';
end if;
wait for 6000 ns;
end process;
end SIM;
